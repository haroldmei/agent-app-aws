name: Agent Quality Assurance Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run nightly tests at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test_scope:
        description: 'Test scope to run'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - sage
          - scholar
          - operator
      test_category:
        description: 'Test category to run'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - agentic-behavior
          - quality-safety
          - integration

env:
  PYTHON_VERSION: '3.12'
  
jobs:
  test-agents-comprehensive:
    name: Comprehensive Agent Testing
    runs-on: ubuntu-latest
    timeout-minutes: 45
    
    services:
      postgres:
        image: agnohq/pgvector:16
        env:
          POSTGRES_DB: ai
          POSTGRES_USER: ai
          POSTGRES_PASSWORD: ai
          PGDATA: /var/lib/postgresql/data/pgdata
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    strategy:
      matrix:
        agent: [sage, scholar, operator]
        category: [agentic-behavior, quality-safety, integration]
      fail-fast: false
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt', '**/agents_test/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r agents_test/requirements.txt

    - name: Wait for PostgreSQL
      run: |
        until pg_isready -h localhost -p 5432 -U ai; do
          echo "Waiting for PostgreSQL..."
          sleep 2
        done
        echo "PostgreSQL is ready!"

    - name: Run Agent Tests
      run: |
        cd agents_test
        python -m pytest \
          -k "${{ matrix.agent }}" \
          --tb=short \
          -v
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        AGNO_DEBUG: true
        # Database configuration for CI
        DB_HOST: localhost
        DB_PORT: 5432
        DB_USER: ai
        DB_PASS: ai
        DB_DATABASE: ai

  agents-test-summary:
    name: Agent Test Summary
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: test-agents-comprehensive
    if: always()
    
    steps:
    - name: Test Summary
      run: |
        echo "All agent tests completed. Check individual job results above."

  agents-performance-tests:
    name: Agent Performance Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: github.event_name == 'schedule' || contains(github.event.head_commit.message, '[perf-test]') || github.event_name == 'workflow_dispatch'
    
    services:
      postgres:
        image: agnohq/pgvector:16
        env:
          POSTGRES_DB: ai
          POSTGRES_USER: ai
          POSTGRES_PASSWORD: ai
          PGDATA: /var/lib/postgresql/data/pgdata
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r agents_test/requirements.txt
    
    - name: Wait for PostgreSQL
      run: |
        until pg_isready -h localhost -p 5432 -U ai; do
          echo "Waiting for PostgreSQL..."
          sleep 2
        done
        echo "PostgreSQL is ready!"
    
    - name: Run Performance Tests
      run: |
        cd agents_test
        python -m pytest \
          test_integration.py::TestPerformanceAndScalability \
          --tb=short \
          -v
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        AGNO_DEBUG: false
        # Database configuration for CI
        DB_HOST: localhost
        DB_PORT: 5432
        DB_USER: ai
        DB_PASS: ai
        DB_DATABASE: ai

  agents-safety-scan:
    name: Agent Safety & Quality Scan
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    services:
      postgres:
        image: agnohq/pgvector:16
        env:
          POSTGRES_DB: ai
          POSTGRES_USER: ai
          POSTGRES_PASSWORD: ai
          PGDATA: /var/lib/postgresql/data/pgdata
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r agents_test/requirements.txt
    
    - name: Wait for PostgreSQL
      run: |
        until pg_isready -h localhost -p 5432 -U ai; do
          echo "Waiting for PostgreSQL..."
          sleep 2
        done
        echo "PostgreSQL is ready!"
    
    - name: Run Safety & Quality Tests
      run: |
        cd agents_test
        python -m pytest \
          test_quality_safety.py \
          --tb=short \
          -v
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        AGNO_DEBUG: false
        # Database configuration for CI
        DB_HOST: localhost
        DB_PORT: 5432
        DB_USER: ai
        DB_PASS: ai
        DB_DATABASE: ai

    - name: Run Code Security Scan
      run: |
        pip install bandit[toml]
        bandit -r agents_test/ -f json -o security-report.json || true
        echo "Security scan completed. Check bandit output above for any issues."
